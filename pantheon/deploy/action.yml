name: 'Deploy to Pantheon'
description: 'Deploys a repository to a Pantheon development or multidev environment.'
author: 'padillaco'
branding:
  icon: 'cloud-lightning'
  color: 'yellow'
inputs:
  base_directory:
    description: 'Base directory for rsync'
    required: false
    default: '.'
  destination_directory:
    description: 'Destination directory for rsync in remote repository'
    required: false
    default: '.'
  exclude_list:
    description: 'Comma-separated list of files and directories to exclude from sync'
    required: false
    default: '.git, .github, .gitmodules, node_modules'
  pantheon_site_id:
    description: 'The Pantheon site ID to deploy to'
    required: true
  ssh_private_key:
    description: 'SSH private key to use for remote repository authentication'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Set Output Variables - Multidev Branch Name
      if: startsWith(github.ref_name, 'feature/multidev/') || (startsWith(github.event.workflow_run.head_branch, 'feature/multidev/') && github.event.workflow.name == 'Pantheon Create Multidev Environment')
      shell: bash
      id: multidev-branch-name
      env:
        HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
      run: |
        if [[ $GITHUB_REF_NAME == feature/multidev/* ]]; then
          echo "name=$(echo ${GITHUB_REF_NAME} | cut -d '/' -f3)" >> $GITHUB_OUTPUT
        else
          echo "name=$(echo ${HEAD_BRANCH} | cut -d '/' -f3)" >> $GITHUB_OUTPUT
        fi

    - name: Deploy to Remote Repository
      uses: padillaco/action-deploy-to-remote-repository@main
      with:
        base_directory: ${{ inputs.base_directory }}
        destination_directory: ${{ inputs.destination_directory }}
        exclude_list: ${{ inputs.exclude_list }}
        remote_repo: 'ssh://codeserver.dev.${{ inputs.pantheon_site_id }}@codeserver.dev.${{ inputs.pantheon_site_id }}.drush.in:2222/~/repository.git'
        remote_branch: ${{ steps.multidev-branch-name.outputs.name || 'master' }}
        ssh_private_key: ${{ inputs.ssh_private_key }}
        # Only force push to newly created multidev environment just incase it is not
        # up to date with the dev branch
        force_push: ${{ steps.multidev-branch-name.outputs.name && 'true' || 'false' }}
